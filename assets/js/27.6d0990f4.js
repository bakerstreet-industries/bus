(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{237:function(e,t,a){"use strict";a.r(t);var r=a(0),o=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("A lot of effort has been put into "),a("code",[e._v("faker.js")]),e._v(" to create a useful and handy\nlibrary. There are still a lot of things to be done, so all contributions are\nwelcome! If you can make "),a("code",[e._v("faker.js")]),e._v(" better, please read the following contribution guide.")]),e._v(" "),a("h1",{attrs:{id:"important"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#important","aria-hidden":"true"}},[e._v("#")]),e._v(" Important")]),e._v(" "),a("ul",[a("li",[e._v("Please make sure that you run both "),a("code",[e._v("gulp")]),e._v(" and tests before making a PR.")])]),e._v(" "),a("h2",{attrs:{id:"support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#support","aria-hidden":"true"}},[e._v("#")]),e._v(" Support")]),e._v(" "),a("p",[a("code",[e._v("faker.js")]),e._v(" relies on "),a("a",{attrs:{href:"http://www.commonjs.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("commonJS"),a("OutboundLink")],1),e._v(" standard and supports both node.js and the\nbrowsers. Keep this in mind, when modifying and/or extending the sources.")]),e._v(" "),a("h2",{attrs:{id:"automation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automation","aria-hidden":"true"}},[e._v("#")]),e._v(" Automation")]),e._v(" "),a("ul",[a("li",[e._v("The project is being built by "),a("a",{attrs:{href:"http://gulpjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("gulp"),a("OutboundLink")],1),e._v(" (see "),a("a",{attrs:{href:"build/gulpfile.js"}},[e._v("gulpfile")]),e._v("), destination directory is "),a("a",{attrs:{href:"build/build"}},[e._v("build/build")])]),e._v(" "),a("li",[e._v("The documentation is auto-generated, based on "),a("a",{attrs:{href:"build/src"}},[e._v("build/src")]),e._v(" markdown sources. If you modify the main "),a("router-link",{attrs:{to:"/packages/bus-test/node_modules/faker/"}},[e._v("Readme.md")]),e._v(" file, the Pull Request will be rejected, since it will be overwritten by the upcoming "),a("code",[e._v("gulp")]),e._v(" execution")],1),e._v(" "),a("li",[e._v("The tests are executing "),a("code",[e._v("mocha")]),e._v(" against all js contents of "),a("a",{attrs:{href:"test"}},[e._v("test")]),e._v(" directory")])]),e._v(" "),a("h2",{attrs:{id:"architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture","aria-hidden":"true"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),a("p",[e._v("The sources are located in the "),a("a",{attrs:{href:"lib"}},[e._v("lib")]),e._v(" directory. All fake data generators are\ndivided into namespaces (each namespace being a separate module). Most of the\ngenerators use the "),a("em",[e._v("definitions")]),e._v(", which are just plain JavaScript\nobjects/arrays/strings that are separate for each "),a("a",{attrs:{href:"lib/locales"}},[e._v("locale")]),e._v(".")])])},[],!1,null,null,null);t.default=o.exports}}]);